enums:
  MyEnum: [One, Two]

types:
  TypeWithoutParams: {}
  TypeOne:
    params:
      ValueOne:
        type: Int
  TypeTwo:
    params:
      ValueTwo:
        type: Int
      ValueEnum:
        type: MyEnum
  TypeThree:
    params:
      ValueThree:
        type: Int


methods:
  Convert:
    description: "Converts one type into another"
    inputs:
      in:
        type: TypeOne
        params:
          ValueOne: n
    outputs:
      optionOne:
        out:
          type: TypeTwo
          params:
            ValueTwo: n
  TestProperty:
    description: "Tests an object for a property"
    inputs:
      objectTwo:
        type: TypeTwo
        params:
          ValueEnum: unset
    outputs:
      optionGood:
        objectTwo:
          type: TypeTwo
          params:
            ValueEnum: One
      optionBad:
        objectTwo:
          type: TypeTwo
          params:
            ValueEnum: Two
  Correct:
    description: "Correct a property if it doesn't match the requirements"
    inputs:
      objectTwo:
        type: TypeTwo
        params:
          ValueEnum: Two
      designParameter:
        type: TypeWithoutParams
        tune: true
    outputs:
      optionOne:
        objectTwo:
          type: TypeTwo
          params:
            ValueEnum: One
  Combine:
    description: "Combines two objects into one"
    inputs:
      objectOne:
        type: TypeOne
      objectTwo:
        type: TypeTwo
        params:
          ValueTwo: x
          ValueEnum: One
    outputs:
      optionOne:
        objectThree:
          type: TypeThree
          params:
            ValueThree: x
  Useless:
    inputs:
      objectOne:
        type: TypeOne
    outputs:
      optionOne:
        objectOne:
          type: TypeOne
          params:
            ValueOne: 1337
